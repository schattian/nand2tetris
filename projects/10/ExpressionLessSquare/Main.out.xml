<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier> test </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> SquareGame </identifier>
        <identifier> game </identifier>
        <symbol> ; </symbol>
      </varDec>
      <letStatement>
        <keyword> let </keyword>
        <identifier> game </identifier>
        <symbol> = </symbol>
        <expression>
          <term>
            <identifier> game </identifier>
          </term>
        </expression>
        <symbol> ; </symbol>
      </letStatement>
      <doStatement>
        <keyword> do </keyword>
        <identifier> game </identifier>
        <symbol> . </symbol>
        <identifier> run </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <doStatement>
        <keyword> do </keyword>
        <identifier> game </identifier>
        <symbol> . </symbol>
        <identifier> dispose </identifier>
        <symbol> ( </symbol>
        <symbol> ) </symbol>
        <symbol> ; </symbol>
      </doStatement>
      <returnStatement>
        <keyword> return </keyword>
        <symbol> ; </symbol>
      </returnStatement>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> more </identifier>
    <symbol> ( </symbol>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> boolean </keyword>
        <identifier> b </identifier>
        <symbol> ; </symbol>
      </varDec>
      <ifStatement>
        <keyword> if </keyword>
        <symbol> ( </symbol>
        <expression>
          <term>
            <identifier> b </identifier>
          </term>
        </expression>
        <symbol> ) </symbol>
        <symbol> { </symbol>
        <symbol> } </symbol>
        <keyword> else </keyword>
        <symbol> { </symbol>
        <symbol> } </symbol>
      </ifStatement>
      <returnStatement>
        <keyword> return </keyword>
        <symbol> ; </symbol>
      </returnStatement>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>